name: '[Kafka API] CI Tests'

on: [push, pull_request]

env:
  KAFKA_SRC_LINK:     https://archive.apache.org/dist/kafka/2.6.0/kafka_2.13-2.6.0.tgz
  CPU_CORE_NUM:       2
  LIBRDKAFKA_VERSION: 1.7.0
  BUILD_SUB_DIR:      build/sub-build

jobs:
  kafka-api-tests:
    runs-on: ${{ matrix.os }}

    env:
      OS_VERSION:        ${{ matrix.os }}
      BUILD_CXX:         ${{ matrix.build-cxx }}
      BUILD_TYPE:        ${{ matrix.build-type }}
      CXX_STANDARD:      ${{ matrix.cxx-standard }}
      CHECK_OPTION:      ${{ matrix.check-option }}
      GENERATE_DOC:      ${{ matrix.generate-doc }}
      WITH_INSTALLATION: ${{ matrix.with-installation }}
      TEST_LABELS:       ${{ matrix.test-labels }}

    strategy:
      matrix:
        include:
          - os:           macos-10.15
            build-cxx:    clang++
            test-labels:  UT|IT

          - os:           windows-latest
            build-cxx:    g++
            test-labels:  UT|IT

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Debug
            test-labels:  UT|IT

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Release
            test-labels:  RT

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Release
            cxx-standard: 14
            test-labels:  UT|IT

          - os:           ubuntu-20.04
            build-cxx:    g++
            check-option: asan
            test-labels:  UT|IT

          - os:           ubuntu-18.04
            build-cxx:    g++
            check-option: tsan
            test-labels:  UT|IT

          - os:           ubuntu-20.04
            build-cxx:    g++
            check-option: ubsan
            test-labels:  UT|IT

          - os:           ubuntu-20.04
            build-cxx:    clang++
            test-labels:  UT|IT
            generate-doc:      true
            with-installation: true

          - os:           ubuntu-20.04
            build-cxx:    clang++
            check-option: clang-tidy

          - os:           ubuntu-18.04
            build-cxx:    g++
            test-labels:  UT|IT

          - os:           ubuntu-18.04
            build-cxx:    clang++
            test-labels:  RT

    steps:
      - uses: actions/checkout@v2

      - name: Update Repo (for ubuntu)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sed -e 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' -e t -e d /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/nonazure.list
          sudo apt-get update

      - name: Install Dependencies (non-windoes)
        if: "!contains(matrix.os, 'windows')"
        run: |
          mkdir -p $BUILD_SUB_DIR
          cd ${BUILD_SUB_DIR}

          export PATH=./:$PATH

          # 1. Install cmake
          if [ ${OS_VERSION} == 'ubuntu-18.04' ]; then
            sudo snap install cmake --classic
            export PATH=/snap/bin:$PATH
          fi

          # 2. Install clang/clang-tidy
          if [[ ${BUILD_CXX} == 'clang'* ]] && [[ ${OS_VERSION} == 'ubuntu'* ]]; then
            sudo rm /usr/bin/clang /usr/bin/clang++
            sudo apt install -y clang-10
            sudo ln -s clang-10 /usr/bin/clang
            sudo ln -s clang++-10 /usr/bin/clang++
          fi
          if [[ ${CHECK_OPTION} == 'clang-tidy' ]]; then
            sudo apt install -y clang-tidy
          fi

          # 3. Install googletest (v1.10.0)
          wget -nv https://github.com/google/googletest/archive/release-1.10.0.tar.gz
          tar -xzf release-1.10.0.tar.gz
          cd googletest-release-1.10.0
          env CXX=${BUILD_CXX} cmake ./
          make -j${CPU_CORE_NUM} && sudo make install
          cd ../

          # 4. Install boost lib
          if [[ ${OS_VERSION} == 'ubuntu'* ]]; then
            sudo apt install -y libboost-all-dev
          elif [[ ${OS_VERSION} == 'macos'* ]]; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            brew install boost
          fi

          # 5. Install librdkafka
          wget -nv https://github.com/edenhill/librdkafka/archive/v${LIBRDKAFKA_VERSION}.tar.gz
          tar -xzf v${LIBRDKAFKA_VERSION}.tar.gz
          cd librdkafka-${LIBRDKAFKA_VERSION}
          ./configure --cxx=${BUILD_CXX}
          make -j${CPU_CORE_NUM} && sudo make install
          cd ../

          # 6. Install kafka
          wget -nv ${KAFKA_SRC_LINK}
          tar -xzf `basename ${KAFKA_SRC_LINK}`

          # 7. Install tools to generate document
          if [ ${GENERATE_DOC} ]; then
            sudo apt install -y python3-pip
            sudo pip3 install markdown
            sudo apt install -y doxygen
          fi

          # Print dev env
          cmake --version | head -n 1
          #g++ --version | head -n 1
          #clang++ --version | head -n 1

      - name: Install Dependencies (for windows)
        if: contains(matrix.os, 'windows')
        run: |
          mkdir -p $Env:BUILD_SUB_DIR
          cd $Env:BUILD_SUB_DIR
          #Invoke-WebRequest -Uri https://eternallybored.org/misc/wget/1.21.1/64/wget.exe -OutFile wget.exe
          #.\wget.exe --version
          #$Env:VCPKG_ROOT="./"
          vcpkg install librdkafka
          vcpkg install gtest
          cp -v "C:\VCPKG\INSTALLED\x86-windows\lib\manual-link\gtest_main*" "C:\VCPKG\INSTALLED\x86-windows\lib\"
          vcpkg install pthread
          cp -v "C:\VCPKG\INSTALLED\x86-windows\lib\pthreadVC3.lib" "C:\VCPKG\INSTALLED\x86-windows\lib\pthread.lib"
          #vcpkg install boost
          vcpkg install boost-program-options
          vcpkg install boost-optional
          vcpkg install boost-algorithm
          vcpkg integrate install
          #tree c:/packages/
          #tree ./
          #tree "C:/vcpkg/installed"
          #cp -v C:/vcpkg/scripts/buildsystems/vcpkg.cmake ./

      - name: Config (non-windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          cd ${BUILD_SUB_DIR}

          if [ ${CXX_STANDARD} ]; then
            export CMAKE_CXX_STANDARD="-DCMAKE_CXX_STANDARD=${CXX_STANDARD}"
          fi

          if [ ${BUILD_TYPE} ]; then
            export CMAKE_BUILD_TYPE="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
          else
            export CMAKE_BUILD_TYPE=""
          fi

          if [[ ${CHECK_OPTION} == 'clang-tidy' ]]; then
            export BUILD_OPTION='-DBUILD_OPTION_CLANG_TIDY=ON'
          fi

          if [[ ${CHECK_OPTION} == 'asan' ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_ASAN=ON"
          fi

          if [[ ${CHECK_OPTION} == 'tsan' ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_TSAN=ON"
          fi

          if [[ ${CHECK_OPTION} == *"ubsan" ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_UBSAN=ON"
          fi

          if [ ${GENERATE_DOC} ]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_GEN_DOC=ON"
          fi

          if [[ ${OS_VERSION} == 'windows'* ]]; then
            export TOOLCHAIN_FILE_OPTION="-DCMAKE_TOOLCHAIN_FILE=vcpkg.cmake"
          fi
          env CXX=${BUILD_CXX} cmake ../.. ${CMAKE_CXX_STANDARD} ${CMAKE_BUILD_TYPE} ${BUILD_OPTION} ${TOOLCHAIN_FILE_OPTION}

      - name: Config (for windows)
        if: contains(matrix.os, 'windows')
        run: |
          cd $Env:BUILD_SUB_DIR
          tree "C:/vcpkg/installed"
          ls -l "C:\VCPKG\INSTALLED\x86-windows\lib"
          ls -l "C:\VCPKG\INSTALLED\x86-windows\lib\manual-link"
          g++ --version
          $Env:GTEST_ROOT='C:\VCPKG\INSTALLED\x86-windows\'
          $Env:BOOST_ROOT='C:\VCPKG\INSTALLED\x86-windows\'; $Env:LD_LIBRARY_PATH='C:\VCPKG\INSTALLED\x86-windows\lib'; cmake -B ./ -S ../.. "-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" "-DCMAKE_CXX_STANDARD=17"
          $Env:BOOST_ROOT='C:\VCPKG\INSTALLED\x86-windows\'; $Env:LD_LIBRARY_PATH='C:\VCPKG\INSTALLED\x86-windows\lib'; cmake --build ./

      - name: Build (non-windows)
        if: "!contains(matrix.os, 'windows')"
        run: |
          cd ${BUILD_SUB_DIR}
          make -j${CPU_CORE_NUM} VERBOSE=1

      - name: Build (for windows)
        if: contains(matrix.os, 'windows')
        run: |
          cd $Env:BUILD_SUB_DIR
          echo $Env:CPS_CORE_NUM
          pwd
          tree "./"
          ls "./"
          # todo: kenneth
          # make -j$Env:CPU_CORE_NUM VERBOSE=1
          #make -j2 VERBOSE=1

      - name: Install
        if: "!contains(matrix.os, 'windows')"
        run: |
          if [ ${WITH_INSTALLATION} ]; then
            cd ${BUILD_SUB_DIR}
            sudo make install
          fi

      - name: Test
        if: "!contains(matrix.os, 'windows') && matrix.test-labels"
        timeout-minutes: 20
        run: |
          cd ${BUILD_SUB_DIR}

          export PATH=`pwd`/`basename ${KAFKA_SRC_LINK} .tgz`/bin:$PATH
          # start kafka cluster
          rm -f test.env
          ../../scripts/start-local-kafka-cluster.py --zookeeper-port 42181 --broker-ports 40091 40092 40093 --temp-dir ./tmp &
          # run tests
          for i in {1..60}; do cat test.env 2>/dev/null && break || sleep 1; done

          source test.env
          ctest -VV -L "${TEST_LABELS}"
          # stop kafka cluster
          kafka-server-stop.sh
          zookeeper-server-stop.sh

