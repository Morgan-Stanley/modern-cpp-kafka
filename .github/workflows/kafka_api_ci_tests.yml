name: "[Kafka API] CI Tests"

on: [push, pull_request]

env:
  KAFKA_SRC_LINK:     https://archive.apache.org/dist/kafka/2.6.0/kafka_2.13-2.6.0.tgz
  CPU_CORE_NUM:       2
  LIBRDKAFKA_VERSION: 1.6.0
  BUILD_SUB_DIR:      build/sub-build

jobs:
  kafka-api-tests:
    runs-on: ${{ matrix.os }}

    env:
      OS_VERSION:        ${{ matrix.os }}
      BUILD_CXX:         ${{ matrix.build-cxx }}
      BUILD_TYPE:        ${{ matrix.build-type }}
      CXX_STANDARD:      ${{ matrix.cxx-standard }}
      CHECK_OPTION:      ${{ matrix.check-option }}
      GENERATE_DOC:      ${{ matrix.generate-doc }}
      WITH_INSTALLATION: ${{ matrix.with-installation }}

    strategy:
      matrix:
        include:
          - os:           macos-10.15
            build-cxx:    clang++

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Debug

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Release

          - os:           ubuntu-20.04
            build-cxx:    g++
            build-type:   Release
            cxx-standard: 14

          - os:           ubuntu-20.04
            build-cxx:    g++
            check-option: asan

          - os:           ubuntu-18.04
            build-cxx:    g++
            check-option: tsan

          - os:           ubuntu-20.04
            build-cxx:    g++
            check-option: ubsan

          - os:           ubuntu-20.04
            build-cxx:    clang++
            generate-doc:      true
            with-installation: true

          - os:           ubuntu-20.04
            build-cxx:    clang++
            check-option: clang-tidy

          - os:           ubuntu-18.04
            build-cxx:    g++

          - os:           ubuntu-18.04
            build-cxx:    clang++

    steps:
      - uses: actions/checkout@v2

      - name: Update Repo
        run: |
          if [[ ${OS_VERSION} == "ubuntu"* ]]; then
            echo "about to update repo"
            sed -e 's/azure.archive.ubuntu.com/us.archive.ubuntu.com/g' -e t -e d /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/nonazure.list
            sudo apt-get update
          fi

      - name: Install Dependencies

        run: |
          mkdir -p $BUILD_SUB_DIR
          cd ${BUILD_SUB_DIR}

          # 1. Install cmake
          if [ ${OS_VERSION} == "ubuntu-18.04" ]; then
            sudo snap install cmake --classic
            export PATH=/snap/bin:$PATH
          fi

          # 2. Install clang-tidy
          if [[ ${CHECK_OPTION} == *"clang-tidy"* ]]; then
            sudo apt install -y clang-tidy
          fi

          # 2. Install googletest (v1.10.0)
          wget -nv https://github.com/google/googletest/archive/release-1.10.0.tar.gz
          tar -xzf release-1.10.0.tar.gz
          cd googletest-release-1.10.0
          env CXX=${BUILD_CXX} cmake ./
          make -j${CPU_CORE_NUM} && sudo make install
          cd ../

          # 3. Install boost lib
          if [[ ${OS_VERSION} == "ubuntu"* ]]; then
            sudo apt install -y libboost-all-dev
          elif [[ ${OS_VERSION} == "macos"* ]]; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            brew install boost
          fi

          # 4. Install librdkafka
          wget -nv https://github.com/edenhill/librdkafka/archive/v${LIBRDKAFKA_VERSION}.tar.gz
          tar -xzf v${LIBRDKAFKA_VERSION}.tar.gz
          cd librdkafka-${LIBRDKAFKA_VERSION}
          ./configure
          make -j${CPU_CORE_NUM} && sudo make install
          cd ../

          # 5. Install kafka
          wget -nv ${KAFKA_SRC_LINK}
          tar -xzf `basename ${KAFKA_SRC_LINK}`

          # 6. Install tools to generate document
          if [ ${GENERATE_DOC} ]; then
            sudo apt install -y python3-pip
            sudo pip3 install markdown
            sudo apt install -y doxygen
          fi

          g++ --version
          clang --version

      - name: Config
        run: |
          cd ${BUILD_SUB_DIR}

          if [ ${CXX_STANDARD} ]; then
            export CMAKE_CXX_STANDARD="-DCMAKE_CXX_STANDARD=${CXX_STANDARD}"
          fi

          if [ ${BUILD_TYPE} ]; then
            export CMAKE_BUILD_TYPE="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
          else
            export CMAKE_BUILD_TYPE=""
          fi

          if [[ ${CHECK_OPTION} == *"clang-tidy"* ]]; then
            export BUILD_OPTION='-DBUILD_OPTION_CLANG_TIDY=ON'
          fi

          if [[ ${CHECK_OPTION} == *"asan"* ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_ASAN=ON"
          fi

          if [[ ${CHECK_OPTION} == *"tsan"* ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_TSAN=ON"
          fi

          if [[ ${CHECK_OPTION} == *"ubsan"* ]]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_USE_UBSAN=ON"
          fi

          if [ ${GENERATE_DOC} ]; then
            export BUILD_OPTION="${BUILD_OPTION} -DBUILD_OPTION_GEN_DOC=ON"
          fi

          env CXX=${BUILD_CXX} cmake ../.. ${CMAKE_CXX_STANDARD} ${CMAKE_BUILD_TYPE} ${BUILD_OPTION}

      - name: Build
        run: |
          cd ${BUILD_SUB_DIR}
          make -j${CPU_CORE_NUM} VERBOSE=1

      - name: Install
        run: |
          if [ ${WITH_INSTALLATION} ]; then
            cd ${BUILD_SUB_DIR}
            sudo make install
          fi

      - name: Test
        timeout-minutes: 15
        run: |
          cd ${BUILD_SUB_DIR}

          export PATH=`pwd`/`basename ${KAFKA_SRC_LINK} .tgz`/bin:$PATH
          # start kafka cluster
          rm -f test.env
          ../../scripts/start-local-kafka-cluster.py --zookeeper-port 42181 --broker-ports 40091 40092 40093 --temp-dir ./tmp &
          # run tests
          for i in {1..60}; do cat test.env 2>/dev/null && break || sleep 1; done

          source test.env
          ctest -VV
          # stop kafka cluster
          kafka-server-stop.sh
          zookeeper-server-stop.sh

